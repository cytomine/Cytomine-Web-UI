stages:
  - prepare
  - test
  - build


variables:
  DOCKER_DEPENDENCIES_IMAGE_NAME: $CI_REGISTRY_IMAGE/web-ui-ee-legacy-deps:$CI_COMMIT_SHORT_SHA


default:
  tags:
    - docker


workflow:
  rules:
    # Avoid the pipeline to be triggered for merge request event, because it would be a duplicated event when
    #  a push is made on a branch that has an open merge request linked (as suggested in the default GitLab workflow)
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never

    # Old versioning scheme vX.Y.Z, if tag matches this, this is considered a release 
    # Otherwise this is a snapshot
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^[0-9]+.[0-9]+.[0-9]+-(?:EDU|LAB|KOL)-[0-9]{6}$/
      variables:
        IS_RELEASE: "true"
    - if: $CI_COMMIT_TAG == null || $CI_COMMIT_REF_NAME !~ /^[0-9]+.[0-9]+.[0-9]+-(?:EDU|LAB|KOL)-[0-9]{6}$/
      variables:
        IS_RELEASE: "false"
    - when: always


make-version-name:
  stage: prepare
  # regex check does not work with /bin/sh because of parenthesis so we need /bin/bash here
  image: bash:5.2.15-alpine3.16
  script:
    - if [[ "$IS_RELEASE" = "true" ]]; then
        echo "CM_VERSION=${CI_COMMIT_TAG}" > .env;
      else
        echo "CM_VERSION=${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}-$(date '+%Y%m%d%H%M%S')-SNAPSHOT" > .env;
      fi
    - cat .env
  artifacts:
    reports:
      dotenv: .env


build-dist:
  stage: build
  image: node:13.12.0  # based on Jenkins build env 
  needs:
    - job: make-version-name
      artifacts: true
  script:
    - "sed -i -- 's/\"version\": \"0.0.0\"/\"version\": \"${CM_VERSION}\"/g' package.json"
    - sed -i -- "s/WEB_UI_VERSION/${CM_VERSION}/g" public/index.html
    - npm install
    - npm run build
    - mv dist dist-${CM_VERSION}
  artifacts:
    when: on_success
    expire_in: never
    paths:
      - dist-*/*
